name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and export Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: false
        load: true
        tags: familyplan:latest

    - name: Save Docker image to file
      run: docker save familyplan:latest > familyplan-image.tar

    - name: Set up SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts

    - name: Deploy Docker image to DigitalOcean
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        # Check if Docker is installed, install if needed
        ssh root@$DROPLET_IP "which docker || (apt-get update && apt-get install -y docker.io)"
        
        # Transfer Docker image
        scp familyplan-image.tar root@$DROPLET_IP:/tmp/
        
        # Load the Docker image
        ssh root@$DROPLET_IP "docker load < /tmp/familyplan-image.tar"
        
        # Check what's using port 8090 and stop it
        ssh root@$DROPLET_IP "lsof -i :8090 || true"
        
        # Find and kill any process using port 8090
        ssh root@$DROPLET_IP "fuser -k 8090/tcp || true"
        
        # Stop and remove any existing container (by name)
        ssh root@$DROPLET_IP "docker stop familyplan-container || true"
        ssh root@$DROPLET_IP "docker rm familyplan-container || true"
        
        # Also find and remove any container using port 8090
        ssh root@$DROPLET_IP "for id in \$(docker ps -q); do if docker port \$id | grep -q 8090; then docker stop \$id && docker rm \$id; fi; done || true"
        
        # Create PocketBase data directory if needed for persistence
        ssh root@$DROPLET_IP "mkdir -p /var/data/familyplan && chmod 777 /var/data/familyplan"
        
        # Wait a moment to ensure the port is released
        ssh root@$DROPLET_IP "sleep 5"
        
        # Run the new container with volume mount for data persistence
        ssh root@$DROPLET_IP "docker run -d \
          --name familyplan-container \
          -p 8090:8090 \
          -v /var/data/familyplan:/app/pb_data \
          --restart=always \
          familyplan:latest"
        
        # Configure firewall to allow port 8090
        ssh root@$DROPLET_IP "ufw allow 8090/tcp || true"
        
        # Clean up the transferred image to save space
        ssh root@$DROPLET_IP "rm /tmp/familyplan-image.tar"
        
        # Display container status
        ssh root@$DROPLET_IP "docker ps | grep familyplan-container || echo 'Container not running!'"

    - name: Verify deployment
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        echo "Waiting 10 seconds for application to start..."
        sleep 10
        
        echo "Deployment completed. Application should be running at http://$DROPLET_IP:8090"
        
        # Try to connect to the application (may fail if GitHub runner is blocked)
        curl -v --connect-timeout 5 http://$DROPLET_IP:8090 || echo "Could not connect from GitHub runner, but the container should be running."