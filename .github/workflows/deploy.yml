name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
      DOMAIN: familyplanmanager.xyz
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: root

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Build application
        run: |
          go mod tidy
          GOOS=linux GOARCH=amd64 go build -o app

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean
        run: |
          # Create app directory if it doesn't exist
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "mkdir -p /var/www/familyplanmanager"
          
          # Transfer application files
          rsync -avz --exclude 'pb_data' --exclude '.git' ./ ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/var/www/familyplanmanager/
          
          # Install dependencies on the server
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "apt update && apt install -y nginx certbot python3-certbot-nginx ufw"
          
          # Create systemd service
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "cat > /etc/systemd/system/familyplanmanager.service << 'EOF'
          [Unit]
          Description=Family Plan Manager
          After=network.target
          
          [Service]
          Type=simple
          User=root
          WorkingDirectory=/var/www/familyplanmanager
          ExecStart=/var/www/familyplanmanager/app
          Restart=on-failure
          RestartSec=5s
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
          EOF"
          
          # Configure Nginx
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "cat > /etc/nginx/sites-available/familyplanmanager << 'EOF'
          server {
              listen 80;
              server_name ${{ env.DOMAIN }} www.${{ env.DOMAIN }};
              
              location / {
                  proxy_pass http://localhost:8090;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF"
          
          # Enable site and configure SSL
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
            ln -sf /etc/nginx/sites-available/familyplanmanager /etc/nginx/sites-enabled/
            nginx -t
            systemctl restart nginx
            
            # Only run certbot if SSL is not already configured
            if [ ! -f /etc/letsencrypt/live/${{ env.DOMAIN }}/fullchain.pem ]; then
              certbot --nginx -d ${{ env.DOMAIN }} -d www.${{ env.DOMAIN }} --non-interactive --agree-tos --email ${{ secrets.ADMIN_EMAIL }}
            fi
            
            # Configure firewall
            ufw allow ssh
            ufw allow http
            ufw allow https
            ufw --force enable
            
            # Reload and restart services
            systemctl daemon-reload
            systemctl enable familyplanmanager
            systemctl restart familyplanmanager
          "

      - name: Verify Deployment
        run: |
          # Wait for deployment to stabilize
          sleep 10
          
          # Check if the application is running
          curl -I https://${{ env.DOMAIN }} || echo "Deployment may need additional time to stabilize"

      - name: Setup Backup System
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
            # Create backup directory
            mkdir -p /root/backups
            
            # Create backup script
            cat > /root/backup_pb_data.sh << 'EOF'
            #!/bin/bash
            TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
            tar -czf /root/backups/pb_data_\$TIMESTAMP.tar.gz /var/www/familyplanmanager/pb_data
            # Keep only the last 7 backups
            ls -tp /root/backups/pb_data_* | grep -v '/$' | tail -n +8 | xargs -I {} rm -- {}
            EOF
            
            chmod +x /root/backup_pb_data.sh
            
            # Setup daily backup cron job
            (crontab -l 2>/dev/null || echo '') | grep -v 'backup_pb_data.sh' | echo '0 2 * * * /root/backup_pb_data.sh' | crontab -
          "