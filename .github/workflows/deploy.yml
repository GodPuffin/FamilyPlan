name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and export Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: false
        load: true
        tags: familyplan:latest

    - name: Save Docker image to file
      run: docker save familyplan:latest > familyplan-image.tar

    - name: Set up SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts

    - name: Deploy Docker image to DigitalOcean
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        # Check if Docker is installed, install if needed
        ssh root@$DROPLET_IP "which docker || (apt-get update && apt-get install -y docker.io)"
        
        # Transfer Docker image
        scp familyplan-image.tar root@$DROPLET_IP:/tmp/
        
        # Load the Docker image
        ssh root@$DROPLET_IP "docker load < /tmp/familyplan-image.tar"
        
        # Clean up existing processes
        ssh root@$DROPLET_IP "systemctl stop familyplan.service || true"
        ssh root@$DROPLET_IP "docker stop familyplan-container || true"
        ssh root@$DROPLET_IP "docker rm familyplan-container || true"
        ssh root@$DROPLET_IP "killall -9 familyplan || true"
        ssh root@$DROPLET_IP "fuser -k 8090/tcp || true"
        ssh root@$DROPLET_IP "sleep 5"
        
        # Create data directory with proper permissions
        ssh root@$DROPLET_IP "mkdir -p /var/data/familyplan && chmod 777 /var/data/familyplan"
        
        # Run Docker container on port 8090 with auto-restart
        ssh root@$DROPLET_IP "docker run -d --name familyplan-container -p 8090:8090 -v /var/data/familyplan:/app/pb_data --restart=always familyplan:latest"
        
        # Configure firewall
        ssh root@$DROPLET_IP "ufw allow 8090/tcp || true"
        ssh root@$DROPLET_IP "ufw allow 80/tcp || true"
        ssh root@$DROPLET_IP "ufw allow 443/tcp || true"
        ssh root@$DROPLET_IP "ufw allow 22/tcp || true"
        ssh root@$DROPLET_IP "ufw --force enable || true"
        
        # Clean up the transferred image
        ssh root@$DROPLET_IP "rm /tmp/familyplan-image.tar"
        
        # Create service status checker script line by line
        ssh root@$DROPLET_IP "echo '#!/bin/bash' > /root/check-familyplan.sh"
        ssh root@$DROPLET_IP "echo 'if ! docker ps | grep -q familyplan-container; then' >> /root/check-familyplan.sh"
        ssh root@$DROPLET_IP "echo '  echo \"Container not running, restarting...\"' >> /root/check-familyplan.sh"
        ssh root@$DROPLET_IP "echo '  docker start familyplan-container' >> /root/check-familyplan.sh"
        ssh root@$DROPLET_IP "echo 'fi' >> /root/check-familyplan.sh"
        ssh root@$DROPLET_IP "chmod +x /root/check-familyplan.sh"
        
        # Add cron job to check every 5 minutes
        ssh root@$DROPLET_IP "echo '*/5 * * * * root /root/check-familyplan.sh' > /etc/cron.d/check-familyplan"
        ssh root@$DROPLET_IP "chmod 644 /etc/cron.d/check-familyplan"
        
        # Display container status
        ssh root@$DROPLET_IP "docker ps | grep familyplan-container || echo 'Container not running!'"
        ssh root@$DROPLET_IP "docker port familyplan-container || echo 'No port mapping found!'"

    - name: Verify deployment
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        echo "Waiting 10 seconds for application to start..."
        sleep 10
        
        echo "Checking service on port 8090..."
        curl -v --connect-timeout 5 http://$DROPLET_IP:8090 || echo "Could not connect on port 8090"
        
        echo "Deployment completed. Application should be running at http://$DROPLET_IP:8090"
        echo "For domain access, make sure DNS is properly configured at Cloudflare."