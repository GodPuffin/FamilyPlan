name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
      DOMAIN: familyplanmanager.xyz
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: root

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Build application
        run: |
          go mod tidy
          GOOS=linux GOARCH=amd64 go build -o app

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create app directory
        run: ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "mkdir -p /var/www/familyplanmanager"
          
      - name: Transfer application files
        run: rsync -avz --exclude 'pb_data' --exclude '.git' ./ ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/var/www/familyplanmanager/
          
      - name: Install dependencies
        run: ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "apt update && apt install -y nginx certbot python3-certbot-nginx ufw net-tools"
          
      - name: Create systemd service
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "cat > /etc/systemd/system/familyplanmanager.service << 'EOFSERVICE'
          [Unit]
          Description=Family Plan Manager
          After=network.target

          [Service]
          Type=simple
          User=root
          WorkingDirectory=/var/www/familyplanmanager
          ExecStart=/var/www/familyplanmanager/app
          Restart=on-failure
          RestartSec=5s
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
          EOFSERVICE"
          
      - name: Configure Nginx
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          if [ ! -f /etc/nginx/sites-available/familyplanmanager ]; then
          cat > /etc/nginx/sites-available/familyplanmanager << 'EOFNGINX'
          server {
              server_name ${{ env.DOMAIN }} www.${{ env.DOMAIN }};
              
              # Debug logs
              access_log /var/log/nginx/familyplanmanager_access.log;
              error_log /var/log/nginx/familyplanmanager_error.log debug;
              
              location / {
                  proxy_pass http://127.0.0.1:8090;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_read_timeout 90;
              }
          }
          EOFNGINX
          fi"
          
      - name: Configure site and SSL
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          # Remove default site to avoid conflicts
          rm -f /etc/nginx/sites-enabled/default

          # Link our site config
          ln -sf /etc/nginx/sites-available/familyplanmanager /etc/nginx/sites-enabled/
          nginx -t
          systemctl restart nginx

          # Configure Certbot for SSL (even if certificates exist)
          certbot --nginx -d ${{ env.DOMAIN }} -d www.${{ env.DOMAIN }} --non-interactive --agree-tos --email ${{ secrets.ADMIN_EMAIL }} || true

          # Fix any IPv6 in nginx config that certbot might have introduced
          sed -i 's/proxy_pass http:\\/\\/\\[::1\\]:8090;/proxy_pass http:\\/\\/127.0.0.1:8090;/g' /etc/nginx/sites-available/familyplanmanager
          nginx -t
          systemctl restart nginx

          # Configure firewall
          ufw allow ssh
          ufw allow http
          ufw allow https
          
          # Ensure localhost can access port 8090
          ufw delete allow from 127.0.0.1 to any port 8090 >/dev/null 2>&1 || true
          ufw delete allow from ::1 to any port 8090 >/dev/null 2>&1 || true
          ufw allow from 127.0.0.1 to any port 8090
          ufw --force enable

          # Make executable and ensure permissions
          chmod +x /var/www/familyplanmanager/app
          
          # Reload and restart services
          systemctl daemon-reload
          systemctl enable familyplanmanager
          systemctl restart familyplanmanager
          
          # Verify application is running
          sleep 5
          systemctl status familyplanmanager
          ps aux | grep app
          netstat -tlnp | grep 8090"

      - name: Verify Deployment
        run: |
          # Wait for deployment to stabilize
          sleep 10
          
          # Check application status
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "systemctl status familyplanmanager || true"
          
          # Check if port is listening
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "netstat -tlnp | grep 8090 || true"
          
          # Check nginx config
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "nginx -t"
          
          # Test HTTP/HTTPS connectivity
          curl -I http://${{ env.DOMAIN }} || echo "HTTP test failed but continuing"
          curl -I https://${{ env.DOMAIN }} || echo "HTTPS test failed but continuing"

      - name: Setup Backup System
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          # Create backup directory
          mkdir -p /root/backups

          # Create backup script
          cat > /root/backup_pb_data.sh << 'EOFBACKUP'
          #!/bin/bash
          TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
          tar -czf /root/backups/pb_data_\$TIMESTAMP.tar.gz /var/www/familyplanmanager/pb_data
          # Keep only the last 7 backups
          ls -tp /root/backups/pb_data_* | grep -v '/$' | tail -n +8 | xargs -I {} rm -- {}
          EOFBACKUP

          chmod +x /root/backup_pb_data.sh

          # Setup daily backup cron job
          (crontab -l 2>/dev/null || echo '') | grep -v 'backup_pb_data.sh' | { cat; echo '0 2 * * * /root/backup_pb_data.sh'; } | crontab -"