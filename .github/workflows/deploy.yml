name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and export Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: false
        load: true
        tags: familyplan:latest

    - name: Save Docker image to file
      run: docker save familyplan:latest > familyplan-image.tar

    - name: Set up SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts

    - name: Deploy Docker image to DigitalOcean
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        # Check if Docker is installed, install if needed
        ssh root@$DROPLET_IP "which docker || (apt-get update && apt-get install -y docker.io)"
        
        # Transfer Docker image
        scp familyplan-image.tar root@$DROPLET_IP:/tmp/
        
        # Load the Docker image
        ssh root@$DROPLET_IP "docker load < /tmp/familyplan-image.tar"
        
        # More aggressive approach to kill processes on port 8090
        ssh root@$DROPLET_IP "echo 'Checking what is using port 8090:'"
        ssh root@$DROPLET_IP "lsof -i :8090 || true"
        
        # Stop the systemd service if it exists
        ssh root@$DROPLET_IP "systemctl stop familyplan.service || true"
        
        # Kill any process using port 8090 with SIGKILL
        ssh root@$DROPLET_IP "fuser -k -9 8090/tcp || true"
        
        # Stop and remove any Docker containers with name familyplan-container
        ssh root@$DROPLET_IP "docker stop familyplan-container || true"
        ssh root@$DROPLET_IP "docker rm familyplan-container || true"
        
        # Find and remove any container using port 8090 (with stronger approach)
        ssh root@$DROPLET_IP "for id in \$(docker ps -a -q); do if docker port \$id 2>/dev/null | grep -q 8090; then docker stop \$id && docker rm \$id; fi; done || true"
        
        # Kill all Docker containers (last resort)
        ssh root@$DROPLET_IP "docker ps -a -q | xargs -r docker stop || true"
        ssh root@$DROPLET_IP "docker ps -a -q | xargs -r docker rm || true"
        
        # Create PocketBase data directory with proper permissions
        ssh root@$DROPLET_IP "mkdir -p /var/data/familyplan && chmod 777 /var/data/familyplan"
        
        # Wait longer to ensure the port is released
        ssh root@$DROPLET_IP "echo 'Waiting for port 8090 to be released...'"
        ssh root@$DROPLET_IP "sleep 10"
        
        # Verify the port is available before proceeding
        ssh root@$DROPLET_IP "if lsof -i :8090; then echo 'Port 8090 is still in use! Forcefully killing processes...'; ps aux | grep -i 8090 | awk '{print \$2}' | xargs -r kill -9; sleep 5; fi"
        
        # Try with a different port if 8090 is still in use
        ssh root@$DROPLET_IP "if lsof -i :8090; then export CONTAINER_PORT=8091; echo 'Using alternate port 8091'; else export CONTAINER_PORT=8090; echo 'Using standard port 8090'; fi; \
          docker run -d \
          --name familyplan-container \
          -p \${CONTAINER_PORT}:8090 \
          -v /var/data/familyplan:/app/pb_data \
          --restart=always \
          familyplan:latest"
        
        # Configure firewall to allow both potential ports
        ssh root@$DROPLET_IP "ufw allow 8090/tcp || true"
        ssh root@$DROPLET_IP "ufw allow 8091/tcp || true"
        
        # Clean up the transferred image to save space
        ssh root@$DROPLET_IP "rm /tmp/familyplan-image.tar"
        
        # Display container status and port mapping
        ssh root@$DROPLET_IP "docker ps | grep familyplan-container || echo 'Container not running!'"
        ssh root@$DROPLET_IP "docker port familyplan-container || echo 'No port mapping found!'"

    - name: Verify deployment
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        echo "Waiting 10 seconds for application to start..."
        sleep 10
        
        echo "Checking service on port 8090..."
        curl -v --connect-timeout 5 http://$DROPLET_IP:8090 || echo "Could not connect on port 8090"
        
        echo "Checking service on port 8091 (fallback)..."
        curl -v --connect-timeout 5 http://$DROPLET_IP:8091 || echo "Could not connect on port 8091"
        
        echo "Deployment completed. Application should be running at either http://$DROPLET_IP:8090 or http://$DROPLET_IP:8091"